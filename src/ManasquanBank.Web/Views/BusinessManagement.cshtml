@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@using umbraco.MacroEngines
@using Newtonsoft.Json
@using RJP.MultiUrlPicker.Models
@using ManasquanBank.Web.Models;
@using umbraco.NodeFactory
@using ContentModels = Umbraco.Web.PublishedContentModels
@using umbraco.cms.businesslogic.web
@using Umbraco.Web.Extensions
@using System.Linq
@using System.Web.Script.Serialization;
@using ClientDependency.Core.Mvc
@{
    Layout = "Master.cshtml";
    Html.RequiresCss("~/css/lib/jquery-ui.css");
    Html.RequiresCss("~/css/lib/jquery.timepicker.css");
    Html.RequiresJs("~/scripts/lib/jquery-ui.js");
    Html.RequiresJs("~/scripts/lib/country-json.js");
    Html.RequiresJs("~/scripts/lib/jquery.timepicker.min.js");
    var title = Model.Content.GetPropertyValue<string>("title");
    var heroImage = Model.Content.GetPropertyValue<IPublishedContent>("heroImage");
    var content = Model.Content.GetPropertyValue<string>("content");
    var cTAButton1 = Model.Content.GetPropertyValue<IEnumerable<IPublishedContent>>("cTAButton1");
    var cTAButton2 = Model.Content.GetPropertyValue<IEnumerable<IPublishedContent>>("cTAButton2");
    var businessthankYouMessage = Model.Content.GetProperty("thankYouMessage").HasValue ? Model.Content.GetProperty("thankYouMessage").Value : "";
    var businessAdminEmail = Model.Content.HasValue("adminEmail") ? Model.Content.GetPropertyValue<int>("adminEmail") : 0;
    var businessConfirmationEmail = Model.Content.HasValue("confirmationEmail") ? Model.Content.GetPropertyValue<int>("confirmationEmail") : 0;
    //var department = Model.Content.GetPropertyValue<string>("department");
    List<departmentslist> departmentList = new List<departmentslist>();
    List<employeeList> employeeList = new List<employeeList>();
    var departmentEmployee = Model.Content.GetPropertyValue<IEnumerable<IPublishedContent>>("departmentsEmployees");
    if (departmentEmployee != null)
    {
        foreach (var depart in departmentEmployee)
        {
            var departmentName = depart.GetPropertyValue<string>("departmentName");
            departmentslist dept = new departmentslist();
            dept.departmentName = departmentName;
            departmentList.Add(dept);

        }
    }
    if (departmentEmployee != null)
    {
        foreach (var depart in departmentEmployee)
        {
            var departmentName = depart.GetPropertyValue<string>("departmentName");
            var employeesName = depart.GetPropertyValue<IEnumerable<IPublishedContent>>("employeeNameTiles");
            var departEmployeesName = depart.GetPropertyValue<IPublishedContent>("departmentsEmployeeList");
            if (departEmployeesName != null)
            {
                var employeechild = Umbraco.Content(departEmployeesName.Id).Children();

                foreach (var empchild in employeechild)
                {
                    var employeeName = empchild.GetPropertyValue<string>("employeeName");
                    var email = empchild.GetPropertyValue<string>("email");
                    if (string.IsNullOrEmpty(employeeName))
                    {
                        employeeName = empchild.GetPropertyValue<string>("managername");
                    }
                    employeeList emplist = new employeeList();
                    emplist.employeeName = employeeName;
                    emplist.departmentName = departmentName;
                    if(!string.IsNullOrEmpty(email))
                    {
                        emplist.employeeEmail = email;
                    }
                    else
                    {
                        emplist.employeeEmail = string.Empty;
                    }
                    employeeList.Add(emplist);
                }

            }
            if(employeesName != null)
            {
                foreach (var emp in employeesName)
                {
                    var employeeName = emp.GetPropertyValue<string>("managementEmployeeName");
                    var email = emp.GetPropertyValue<string>("employeeEmail");
                    employeeList emplist = new employeeList();
                    emplist.employeeName = employeeName;
                    emplist.departmentName = departmentName;
                    if(!string.IsNullOrEmpty(email))
                    {
                        emplist.employeeEmail = email;
                    }
                    else
                    {
                        emplist.employeeEmail = string.Empty;
                    }
                    employeeList.Add(emplist);
                }
            }
        }
    }
}

@section InnerTopStyle {
}

@section BackgroundImage {
    @if (heroImage != null)
    {
        <div class="fixedBg fade out" style="background-image: url('@heroImage.Url')">
            @*<img src="images/body_bg.jpg" alt="">*@
        </div>
    }
}
<div class="re-order">

    <section class="heroBanner"></section>
    <section class="heroBlock" id="sliders-container">
        <div class="containerWrapper">
            <div class="bgWrap">
                @if (!string.IsNullOrEmpty(title))
                {
                    <h2>@title</h2>
                }
                @if (!string.IsNullOrEmpty(content))
                {
                    @Html.Raw(content)
                }

                <ul class="heroLinks">
                    @if (Model.Content.HasValue("cTAButton1"))
                    {
                        foreach (var CTA in cTAButton1)
                        {
                            var cTAtitle = CTA.GetPropertyValue<string>("title");
                            var iconImage = CTA.GetPropertyValue<IPublishedContent>("iconImage");
                            var link = CTA.GetPropertyValue<Link>("link");

                            <li class="find-us">
                                @if (link != null)
                                {
                                    if (link.Target == "_blank")
                                    {
                                        <a href="@link.Url" target="_blank">
                                            <span class="heroLinksImage">
                                                @if (iconImage != null)
                                                {
                                                    <img src="@iconImage.Url" alt="@Umbraco.StripHtml(cTAtitle.ToString())">
                                                }

                                            </span>
                                            <span class="heroLinksText">
                                                @if (!string.IsNullOrEmpty(cTAtitle))
                                                {
                                                    @Html.Raw(cTAtitle)
                                                }
                                            </span>

                                        </a>
                                    }
                                    else
                                    {
                                        <a href="@link.Url">
                                            <span class="heroLinksImage">
                                                @if (iconImage != null)
                                                {
                                                    <img src="@iconImage.Url" alt="@Umbraco.StripHtml(cTAtitle.ToString())">
                                                }

                                            </span>
                                            <span class="heroLinksText">
                                                @if (!string.IsNullOrEmpty(cTAtitle))
                                                {
                                                    @Html.Raw(cTAtitle)
                                                }
                                            </span>
                                        </a>
                                    }

                                }
                                @*else
                                    {
                                        <span class="heroLinksImage">
                                            @if (iconImage != null)
                                            {
                                                <img src="@iconImage.Url" alt="@iconImage.Name">
                                            }

                                        </span>
                                                        <span class="heroLinksText">
                                                            @if (!string.IsNullOrEmpty(cTAtitle))
                                                            {
                                                                @Html.Raw(cTAtitle)
                                                            }
                                                        </span>
                                    }*@

                            </li>
                        }

                    }
                    @if (Model.Content.HasValue("cTAButton2"))
                    {
                        foreach (var CTA in cTAButton2)
                        {
                            var cTAtitle = CTA.GetPropertyValue<string>("title");
                            var iconImage = CTA.GetPropertyValue<IPublishedContent>("iconImage");
                            var link = CTA.GetPropertyValue<Link>("link");

                            <li class="call-us">
                                @if (link != null)
                                {
                                    if (link.Target == "_blank")
                                    {
                                        <a href="tel:@link.Url" target="_blank">
                                            <span class="heroLinksImage">
                                                @if (iconImage != null)
                                                {
                                                    <img src="@iconImage.Url" alt="@Umbraco.StripHtml(cTAtitle.ToString())">
                                                }

                                            </span>
                                            <span class="heroLinksText">
                                                @if (!string.IsNullOrEmpty(cTAtitle))
                                                {
                                                    @Html.Raw(cTAtitle)
                                                }
                                            </span>

                                        </a>
                                    }
                                    else
                                    {
                                        <a href="tel:@link.Url">
                                            <span class="heroLinksImage">
                                                @if (iconImage != null)
                                                {
                                                    <img src="@iconImage.Url" alt="@Umbraco.StripHtml(cTAtitle.ToString())">
                                                }

                                            </span>
                                            <span class="heroLinksText">
                                                @if (!string.IsNullOrEmpty(cTAtitle))
                                                {
                                                    var replacetitle = cTAtitle.Replace("<p>", "").Replace("</p>", "");
                                                    @Html.Raw(replacetitle)
                                                }
                                            </span>
                                        </a>
                                    }

                                }
                                @*else
                                    {
                                        <span class="heroLinksImage">
                                            @if (iconImage != null)
                                            {
                                                <img src="@iconImage.Url" alt="@Umbraco.StripHtml(cTAtitle.ToString())">
                                            }

                                        </span>
                                                        <span class="heroLinksText">
                                                            @if (!string.IsNullOrEmpty(cTAtitle))
                                                            {
                                                                var replacetitle = cTAtitle.Replace("<p>", "").Replace("</p>", "");
                                                                @Html.Raw(replacetitle)
                                                            }
                                                        </span>
                                    }*@

                            </li>
                        }

                    }
                </ul>
            </div>
        </div>
    </section>
    <section class="greyPanel">
        <div class="containerWrapper">
            <div class="bgWrap">
                @if (String.IsNullOrEmpty(ViewBag.businessErrorMessage) == false)
                {
                    <div class="alert alert-warning warnAlert">
                        <strong>Warning!</strong> @ViewBag.businessErrorMessage
                    </div>
                }
                <div class="contactFormWrap">

                    @using (Html.BeginUmbracoForm("SubmitForm", "BusinessManagement", FormMethod.Post, new { id = "contactForm", @class = "contactForm wpcf7-form" }))
                    {


                        if (String.IsNullOrEmpty(ViewBag.businessSuccessMessage) == false)
                        {
                            if (!string.IsNullOrEmpty(businessthankYouMessage.ToString()))
                            {
                                <div id="contactSucc" class="success-msg">
                                    <h4>@Html.Raw(businessthankYouMessage)</h4>
                                </div>
                            }
                            else
                            {
                                <div id="contactSucc" class="success-msg">
                                    <h4>@ViewBag.businessSuccessMessage</h4>
                                </div>
                            }

                        }
                        else
                        {

                            string secretKey = @System.Configuration.ConfigurationManager.AppSettings["recaptchaPrivateKey"];
                            string publicKey = @System.Configuration.ConfigurationManager.AppSettings["recaptchaPublicKey"];
                            <div class="row">

                                <div class="col-md-12 col-sm-12 col-lg-12 parentWrapper">

                                    <div class="form-group col-lg-6 col-xs-12 nopadding">
                                        <label for="department">Department</label>
                                        <select name="department" title="Department" id="department" class="form-control selectBox"  required="">
                                            <option value="">Choose Department</option>

                                            @foreach (var deptName in departmentList)
                                            {
                                                if (deptName.departmentName == Request.QueryString["department"])
                                                {
                                                    <option data-rel="@deptName.departmentName" value="@deptName.departmentName" selected>@deptName.departmentName</option>
                                                }
                                                else
                                                {
                                                    <option data-rel="@deptName.departmentName" value="@deptName.departmentName">@deptName.departmentName</option>
                                                }
                                            }
                                        </select>
                                        <span class="errorSpan vd f-error">*</span>
                                    </div>
                                    <div class="form-group col-lg-6 col-xs-12 nopadding">
                                        <label for="employee">Employee</label>
                                        <select name="employee" title="Employee" id="employee" class="form-control selectBox"  required="">
                                            <option value="">Select Employee</option>
                                            @foreach (var emplist in employeeList)
                                            {
                                                if (emplist.employeeName == Request.QueryString["employee"])
                                                {
                                                    <option data-email="@emplist.employeeEmail" data-rel="@emplist.departmentName" value="@emplist.employeeName" selected>@emplist.employeeName</option>
                                                    
                                                }
                                                else
                                                {
                                                    <option data-email="@emplist.employeeEmail" data-rel="@emplist.departmentName" value="@emplist.employeeName">@emplist.employeeName</option>
                                                }
                                            }
                                        </select>
                                        <input type="hidden" name="employeeEmail" id="employeeEmail" />
                                        <span class="errorSpan vd f-error">*</span>
                                    </div>
                                    <div class="form-group col-lg-4 col-sm-6 col-xs-12 nopadding">
                                        <label for="firstName">First Name</label>
                                        <input type="text" class="form-control " maxlength="50" required name="firstName" id="firstName">
                                        <span class="errorSpan vd f-error">*</span>
                                    </div>
                                    <div class="form-group col-lg-4 col-sm-6 col-xs-12 nopadding">
                                        <label for="lastName">Last Name</label>
                                        <input type="text" class="form-control " maxlength="50" required name="lastName" id="lastName">
                                        <span class="errorSpan vd f-error">*</span>
                                    </div>
                                    <div class="form-group col-lg-6 col-xs-12 nopadding">
                                        <label for="cntTelePhone">Phone number</label>
                                        <input type="text" class="form-control" name="cntTelePhone" required id="cntTelePhone">
                                        <span class="errorSpan vd f-error">*</span>
                                    </div>
                                    <div class="form-group col-lg-6 col-xs-12 nopadding">
                                        <label for="cntEmail">Email</label>
                                        <input type="email" class="form-control" required="" name="cntEmail" id="cntEmail" aria-required="true" aria-invalid="true">
                                        <span class="errorSpan vd f-error">*</span>
                                    </div>
                                    <div class="form-group col-lg-6 col-xs-12 nopadding">
                                        <label for="addressOne">Address line 1</label>
                                        <input type="text" class="form-control " required name="addressOne" id="addressOne">
                                        <span class="errorSpan vd f-error">*</span>
                                    </div>
                                    <div class="form-group col-lg-6 col-xs-12 nopadding">
                                        <label for="addressTwo">Address line 2</label>
                                        <input type="text" class="form-control" name="addressTwo" id="addressTwo">

                                    </div>
                                    <div class="form-group col-lg-6 col-xs-12 nopadding">
                                        <label for="city">City</label>
                                        <input type="text" class="form-control" required name="city" id="city">
                                        <span class="errorSpan vd f-error">*</span>
                                    </div>
                                    <div class="form-group col-lg-6 col-xs-12 nopadding">
                                        <label for="state">State</label>
                                        <select name="state" title="State" id="state" class="form-control selectBox" data-default="" required="">
                                            <option value="">Select State</option>

                                        </select>
                                        <span class="errorSpan vd f-error">*</span>
                                    </div>

                                    <div class="form-group col-lg-6 col-xs-12 nopadding">
                                        <label for="zip">Zip Code</label>
                                        <input type="text" class="form-control " required name="zip" id="zip">
                                        <span class="errorSpan vd f-error">*</span>
                                    </div>
                                    <div class="form-group col-lg-6 col-xs-12 nopadding">
                                        <label for="country">Country</label>
                                        <select name="country" title="Country" id="country" class="form-control selectBox" data-default="United States" required="">
                                            <option value="" data-rel="">Select Country</option>

                                        </select>
                                        <span class="errorSpan vd f-error">*</span>
                                    </div>

                                    <div class="col-lg-12 col-xs-12 form-group">

                                        <label for="cntComments">Message</label>
                                        <textarea class="form-control txtArea" name="cntComments" id="cntComments" rows="4"></textarea>

                                    </div>

                                </div>

                            </div>


                            <div class="row mob-flex">

                                <button class="btnManasq" onclick="fnvalue()"><span>SUBMIT</span></button>
                                <input type="hidden" id="AdminEmail" name="AdminEmail" value="@businessAdminEmail" />
                                    <input type="hidden" id="ConfirmationEmail" name="ConfirmationEmail" value="@businessConfirmationEmail" />
                            </div>
                                            <div class="captchaBlock">
                                                <div id="capt_contact" class="g-recaptcha" data-sitekey="@publicKey" data-callback="onSubmit" data-size="invisible"></div>
                                                <p class="form1_error hide">The captcha is required and can't be empty.</p>

                                            </div>

                        }
                    }
                </div>
            </div>
        </div>
    </section>

</div>
@section InnerBottomScript {
    <script>

        $(document).ready(function () {
            $("#department").find("option[value='']").remove();
            //alert($("#employee").val());
            var url = window.location.search;
            
            var sel = $("#department").val();
            var emp = $("#employee").val();
            if (sel == '') {
                $("#department").find("option:first-child").prop("selected", true);
                sel = $("#department").val();
            }
            if (emp == '')
            {
                $("#employee,#department").selectmenu("destroy");
            }
            else {
                $("#department").selectmenu("destroy");
            }


            $("#employee").find("option").attr("disabled", true);
            $("#employee").find("option[data-rel='" + sel + "']").attr("disabled", false);
           
            if (window.location.href.indexOf('employee=') == -1)
            {

                var i = 0;
                $("#employee").find("option").each(function () {
                    if (i == 0 && $(this).prop("disabled") == false) {
                        $(this).prop("selected", "selected");
                        i++;
                    }
                });
            }
            
           

            $("#department").selectmenu();
            $("#employee").selectmenu();
            
            var empEmail = $("#employee").find("option:selected").attr('data-email');
            $("#employeeEmail").val(empEmail);


            $("#department").on('selectmenuchange', function () {
                var sel = $("#department").val();
                $("#employee").selectmenu("destroy");
                $("#employee").val('');
                $("#employee").find("option").attr("disabled", true);
                if (sel != '') {
                    $("#employee").find("option[data-rel='" + sel + "']").attr("disabled", false);
                }
                var i = 0;
                $("#employee").find("option").each(function () {
                    if (i == 0 && $(this).prop("disabled") == false) {
                        $(this).prop("selected", "selected");
                        i++;
                    }
                });
                $("#employee").selectmenu();
                var empEmail = $("#employee").find("option:selected").attr('data-email');
                $("#employeeEmail").val(empEmail);
                
                $("#employee").on('selectmenuchange', function () {
                    var empEmail = $("#employee").find("option:selected").attr('data-email');
                    $("#employeeEmail").val(empEmail);
                });
            });

            $("#employee").on('selectmenuchange', function () {
                var empEmail = $("#employee").find("option:selected").attr('data-email');
                $("#employeeEmail").val(empEmail);
                
            });

            $("#state").selectmenu("destroy");
            $('#basicExample').timepicker();
            $("#contactSucc").length > 0 && $("html, body").animate({
                scrollTop: $(".contactFormWrap").offset().top - $("header").height()
            }, "slow")

            // if (jQuery("#zip").length > 0) {
            //   document.getElementById('zip').addEventListener('input', function(e) {
            //     var x = e.target.value.replace(/\D/g, '').match(/(\d{0,5})/);
            //     e.target.value = x[1];
            //   });
            // }
            if (jQuery("#accNo").length > 0) {
                document.getElementById('accNo').addEventListener('input', function (e) {
                    var x = e.target.value.replace(/\D/g, '').match(/(\d{0,4})/);
                    e.target.value = x[1];
                });
            }
        });
        $(document).ready(function () {
            $.each(myJson.countries, function (index, value) {
                $("#country").append('<option rel="' + index + '" value="' + value.country + '">' + value.country + '</option>');
            });
            country_id = $("#country").attr("data-default");
            $("#country").find("option[value='" + country_id + "']").prop("selected", true).trigger("change");


            country_id = $("#country").find('option:selected').attr('rel');
            // console.log("Country INDEX : " + country_id);
            if (country_id != "") {
                $.each(myJson.countries[country_id].states, function (index1, value1) {
                    $("#state").find("option:first").text("-Select State-");
                    $("#state").append('<option rel="' + index1 + '" value="' + value1 + '">' + value1 + '</option>');
                    // $("#state").selectmenu("refresh");
                });

                state_id = $("#state").attr("data-default");
                $("#state").find("option[value='" + state_id + "']").prop("selected", true).trigger("change");
            }
            $("#state,#country").selectmenu();
            $("#country").parent().find("span.vd").removeClass('f-important f-error').addClass('f-success');
            $("#country").on('selectmenuchange', function () {
                $("#state").selectmenu("destroy");
                country_id = $(this).find('option:selected').attr('rel');
                $("#state").find("option").not("option:nth-child(1)").remove();
                $("#state").find("option:first").text("-Select State-");
                $.each(myJson.countries[country_id].states, function (index1, value1) {

                    $("#state").append('<option rel="' + index1 + '" value="' + value1 + '">' + value1 + '</option>');
                    console.log('<option rel="' + index1 + '" value="' + value1 + '">' + value1 + '</option>');
                });
                $("#state").selectmenu();

            });
        });
    </script>



}
