@using ClientDependency.Core.Mvc
@using ManasquanBank.Web.Controllers
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Web.Script.Serialization;
@using System.Text.RegularExpressions
@using ContentModels = Umbraco.Web.PublishedContentModels;
@using RJP.MultiUrlPicker.Models;
@using System.Text.RegularExpressions
@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@using ManasquanBank.Web.Helpers;
@{
    Layout = "Master.cshtml";
    var heroImage = Model.Content.GetPropertyValue<IPublishedContent>("heroImage");
    var introText = Model.Content.GetPropertyValue<string>("introText");
    var siteTitle = Model.Content.GetPropertyValue<string>("siteTitle");
    SocialFeedController t = new SocialFeedController();
}

@section BackgroundImage {
    @if (heroImage != null)
    {
        <div class="fixedBg fade out" style="background-image: url('@heroImage.Url')">
            <img src="images/body_bg.jpg" alt="">
        </div>
    }
}
<div class="socialMedia">
    <section class="heroBanner">
       
    </section>
   
    <section class="heroBlock">
        <div class="containerWrapper">
            <div class="bgWrap">
                @if (!string.IsNullOrEmpty(siteTitle))
                {
                    <h2>@siteTitle</h2>
                }
                @if (!string.IsNullOrEmpty(introText))
                {
                    @Html.Raw(introText)
                }
                
                <ul id="masFilter">
                    <li class="active" data-filter="all">All</li>
                    <li data-filter="fb">Facebook</li>
                    <li data-filter="tw">Twitter</li>
                    <li data-filter="yt">Youtube</li>
                    <li data-filter="ig">Instagram</li>
                </ul>
            </div>
        </div>
    </section>

    <section class="socialPanel">
        <div class="containerWrapper">
            <div class="bgWrap">
                <div class="filtr-container">
@try
{
    /* Twitter Config */
    var twitterConsumerKey = Model.Content.AncestorOrSelf(1).GetPropertyValue<string>("twitterConsumerKey");
    var twitterSecretKey = Model.Content.AncestorOrSelf(1).GetPropertyValue<string>("twitterSecretKey");
    var twitterId = Model.Content.AncestorOrSelf(1).GetPropertyValue<string>("twitterId");
    var twitterCount = Model.Content.AncestorOrSelf(1).GetPropertyValue<int>("twitterCount");
    var twitterFeeds = t.GetTwitterFeed(twitterConsumerKey, twitterSecretKey, twitterId, twitterCount);
    var jArray = JArray.Parse(twitterFeeds);
    if (jArray.Count > 0)
    {
        int i = 0;
        foreach (dynamic tweetlist in jArray)
        {
            var date = tweetlist.created_at.ToString("hh:mm , dd MMM yyyy");
            string[] temp, timesplit;
            string twitterdate, displayTime;
            try
            {
                twitterdate = tweetlist.created_at.ToString("hh:mm , dd MMM yyyy");
                temp = twitterdate.Split(' ');
                timesplit = temp[3].Split(':');
                int timesp = Convert.ToInt32(1) - 7;
                TimeSpan timespan = new TimeSpan(timesp, Convert.ToInt32(timesplit[1]), Convert.ToInt32(timesplit[2]));
                DateTime time = DateTime.Today.Add(timespan);
                displayTime = time.ToString("hh:mm tt") + ", " + temp[2] + " " + temp[1] + " " + temp[5];
            }
            catch (Exception ex)
            {
                displayTime = tweetlist.created_at.ToString("hh:mm , dd MMM yyyy");
            }

            DateTime created_time = Convert.ToDateTime(displayTime);
            var formatedDate = created_time.ToString("yyyy-MM-dd");
            var twDate = t.changeDateFormat(created_time, DateTime.UtcNow).ToString();
            string msg = string.Empty;
            if (tweetlist.full_text.ToString() != null)
            {
                msg = tweetlist.full_text.ToString();
            }
            else
            {
                msg = string.Empty;
            }

            string text = t.ReplaceHashTagsAndUsernamesWithUrls(msg).ToString();
            foreach (var url in tweetlist.entities.urls)
            {
                string link = url.url.ToString();
                string newtab = "true";
                text = t.ReplaceFlatUrlWithHTMLUrl(text, link, newtab);

            }

                <div class="filtr-item" data-category="tw" data-date="@formatedDate">
                    <div class="flexPanelWrap">
                        <div class="flexPanelHead">
                            <div class="headLogo">
                                <figure>
                                    <a href="https://twitter.com/@tweetlist.user.screen_name" target="_blank">
                                        <img src="~/images/header/logo_fav.jpg" alt="Manasquan Bank">
                                    </a>
                                </figure>
                                <h5><a href="https://twitter.com/@tweetlist.user.screen_name" target="_blank">Manasquan Bank</a></h5>
                            </div>
                            <div class="headDate">
                                <span>@twDate</span>
                            </div>
                        </div>
                        <div class="flexPanelBody">
                            @if (tweetlist.extended_entities != null)
                            {
                                int s = 0;
                                foreach (dynamic media in tweetlist.extended_entities["media"])
                                {
                                    if (s == 0) { 
                                    <figure>
                                        <a href="@media.url" target="_blank"><img src="@media.media_url" alt="Twitter Feed Image" /><span class="screen-reader-text">@text</span></a>
                                    </figure>
                                        s++;
                                    }
                                }

                            }
                            <p>@Html.Raw(text)</p>
                        </div>
                        <div class="flexPanelFoot">
                            <div class="flexIcon">
                                <figure>
                                    <a href="https://twitter.com/@tweetlist.user.screen_name" target="_blank">
                                        <img src="~/images/social/twitter.png" alt="Twitter">
                                    </a>
                                </figure>
                            </div>
                        </div>
                    </div>
                </div>
           
            
        }
    }
}
catch (Exception e)
{
    @Html.Raw(e.Message.ToString())
    
}
@try
{
    /* Facebook Config */
    var facebookAppId = Model.Content.AncestorOrSelf(1).GetPropertyValue<long>("facebookAppId");
    var facebookAppSecretId = Model.Content.AncestorOrSelf(1).GetPropertyValue<string>("facebookAppSecretId");
    var facebookId = Model.Content.AncestorOrSelf(1).GetPropertyValue<string>("facebookId");
    var facebookCount = Model.Content.AncestorOrSelf(1).GetPropertyValue<int>("facebookCount");
    var facebookFeed = t.GetFacebookFeed_next(facebookAppId, facebookAppSecretId, facebookId, facebookCount);
    try
    {
        var fbArray = JsonConvert.DeserializeObject(facebookFeed);
        if (fbArray.data.Count > 0)
        {
            int i = 0;
            foreach (dynamic fblist in fbArray.data)
            {
                string message = string.Empty;
                if (fblist.message != null)
                {
                    message = fblist.message;
                }
                else
                {
                    message = string.Empty;
                }
                var picture = fblist.full_picture;
                var link = fblist.link;
                var profile_url = fblist.from.id;

                string[] temp, timesplit;
                string fbDate, displayTime;
                try
                {
                    fbDate = fblist.created_time.ToString("hh:mm , dd MMM yyyy");
                    temp = fbDate.Split(' ');
                    timesplit = temp[3].Split(':');
                    TimeSpan timespan = new TimeSpan(Convert.ToInt32(timesplit[0]), Convert.ToInt32(timesplit[1]), Convert.ToInt32(timesplit[2]));
                    DateTime time = DateTime.Today.Add(timespan);
                    displayTime = time.ToString("hh:mm tt") + ", " + temp[2] + " " + temp[1] + " " + temp[5];
                }
                catch (Exception ex)
                {
                    displayTime = fblist.created_time.ToString("hh:mm , dd MMM yyyy");
                }

                DateTime created_time = Convert.ToDateTime(displayTime);
                var formatedDate = created_time.ToString("yyyy-MM-dd");
                var facebookDate = t.changeDateFormat(created_time, DateTime.UtcNow).ToString();
                <div class="filtr-item" data-category="fb" data-date="@formatedDate">
                    <div class="flexPanelWrap">
                        <div class="flexPanelHead">
                            <div class="headLogo">
                                <figure>
                                    <a href="//www.facebook.com/@profile_url" target="_blank"><img src="~/images/header/logo_fav.jpg" alt="Manasquan Bank"></a>
                                </figure>
                                <h5><a href="//www.facebook.com/@profile_url" target="_blank">Manasquan Bank </a></h5>
                            </div>
                            <div class="headDate">
                                <span>@facebookDate</span>
                            </div>
                        </div>
                        <div class="flexPanelBody">
                            @if (picture != null)
                            {
                                <figure>
                                    <a href="@link" target="_blank"><img src="@picture" alt="@message"><span class="screen-reader-text">@message</span></a>
                                </figure>
                            }

                            <p>@message</p>
                        </div>
                        <div class="flexPanelFoot">
                            <div class="flexIcon">
                                <figure>
                                    <a href="//www.facebook.com/@profile_url" target="_blank"><img src="~/images/social/facebook.png" alt="Facebook"></a>
                                </figure>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    }
    catch (Exception e)
    {
       // @Html.Raw(e.Message.ToString())
    }
}
catch (Exception e)
{
   @Html.Raw(e.Message.ToString())
}
@try
{
    /* Youtube Config */
    var youtubeAPIKey = Model.Content.AncestorOrSelf(1).GetPropertyValue<string>("youtubeAPIKey");
    var youtubeChannelId = Model.Content.AncestorOrSelf(1).GetPropertyValue<string>("youtubeChannelId");
    var youtubeCount = Model.Content.AncestorOrSelf(1).GetPropertyValue<int>("youtubeCount");
    var youTubeFeed = t.GetYoutubeFeed(youtubeAPIKey, youtubeChannelId, youtubeCount);
    if (youTubeFeed.Count > 0)
    {
        int j = 0;
        foreach (var item in youTubeFeed)
        {
            DateTime yt_time = Convert.ToDateTime(item.Snippet.PublishedAt.Date);
            var FormatedTime = t.changeDateFormat(item.Snippet.PublishedAt.Date, DateTime.UtcNow).ToString();
            var formatedDate = yt_time.ToString("yyyy-MM-dd");
            if (j > 1)
            {
                <div class="filtr-item" data-category="yt" data-date="@formatedDate">
                    <div class="flexPanelWrap">
                        <div class="flexPanelHead">
                            <div class="headLogo">
                                <figure>
                                    <a href="//www.youtube.com/channel/@item.Snippet.ChannelId" target="_blank"><img src="~/images/header/logo_fav.jpg" alt="Manasquan Logo"></a>
                                </figure>
                                <h5><a href="//www.youtube.com/channel/@item.Snippet.ChannelId" target="_blank">Manasquan Bank</a></h5>
                            </div>
                            <div class="headDate">
                                <span>@FormatedTime</span>
                            </div>
                        </div>
                        <div class="flexPanelBody">
                            @if (item.Snippet.Thumbnails != null)
                            {
                                <figure>
                                    @if (item.Id.VideoId != null)
                                    {
                                        <a href="//www.youtube.com/embed/@item.Id.VideoId" target="_blank"><img src="@item.Snippet.Thumbnails.High.Url" alt="@item.Snippet.Title"><span class="screen-reader-text">@item.Snippet.Title</span></a>
                                    }

                                </figure>
                            }
                            <p><a href="//www.youtube.com/embed/@item.Id.VideoId" target="_blank">@item.Snippet.Title</a></p>
                        </div>
                        <div class="flexPanelFoot">
                            <div class="flexIcon">
                                <figure>
                                    <a href="//www.youtube.com/channel/@item.Snippet.ChannelId" target="_blank"><img src="~/images/social/youtube.png" alt="YouTube"></a>
                                </figure>
                            </div>
                        </div>
                    </div>
                </div>

            }
            j++;
        }
    }
}
catch (Exception e)
{
    @Html.Raw(e.Message.ToString())
}
@try
{
    /* Instagram Config */
    var instagramAccessToken = Model.Content.AncestorOrSelf(1).GetPropertyValue<string>("instagramAccessToken");
    var instagramUserId = Model.Content.AncestorOrSelf(1).GetPropertyValue<long>("instagramUserId");
    var instagramCount = Model.Content.AncestorOrSelf(1).GetPropertyValue<int>("instagramCount");
    var instaFeed = t.GetInstagramTimeline(instagramAccessToken, instagramUserId, instagramCount);
    dynamic InstaFeedObject = JsonConvert.DeserializeObject(instaFeed);
    foreach (var item in InstaFeedObject)
    {
        var image_url = item.images.standard_resolution.url;
        double created_time = item.created_time;
        var profile_name = item.user.username;
        var message = "";
        if (item.caption != null)
        {
            message = item.caption.text;

        }
        else
        {
            message = "";
        }

        var link = item.link;
        DateTime origin = new DateTime(1970, 1, 1, 0, 0, 0, 0);
        DateTime b = origin.AddSeconds(created_time);
        var formatedDate = b.ToString("yyyy-MM-dd");
        var FormatedTime = t.changeDateFormat(b, DateTime.UtcNow).ToString();
        <div class="filtr-item" data-category="ig" data-date="@formatedDate">
            <div class="flexPanelWrap">
                <div class="flexPanelHead">
                    <div class="headLogo">
                        <figure>
                            <a href="//www.instagram.com/@profile_name" target="_blank"><img src="~/images/header/logo_fav.jpg" alt="Logo Image"></a>
                        </figure>
                        <h5><a href="//www.instagram.com/@profile_name" target="_blank">Manasquan Bank</a></h5>
                    </div>
                    <div class="headDate">
                        <span>@FormatedTime</span>
                    </div>
                </div>
                <div class="flexPanelBody">
                    @if (image_url != null)
                    {
                        <figure>
                            <a href="@link" target="_blank"><img src="@image_url" alt="Instagram Post Image"><span class="screen-reader-text">Instagram Feed image</span></a>
                        </figure>
                    }
                    
                    <p>@message</p>
                </div>
                <div class="flexPanelFoot">
                    <div class="flexIcon">
                        <figure>
                            <a href="//www.instagram.com/@profile_name" target="_blank"><img src="~/images/social/instagram.png" alt="Instagram"></a>
                        </figure>
                    </div>
                </div>
            </div>
        </div>

    }
}
catch (Exception e)
{
    @Html.Raw(e.Message.ToString())
}
                </div>
            </div>
        </div>
    </section>
</div>
@section InnerBottomScript {
<script type='text/javascript' src='~/scripts/lib/jquery.filterizr.min.js'></script>
<script>
    $(window).on("load", function (e) {
        // Default options
        var options = {
            animationDuration: 0.5, // in seconds
            filter: 'all', // Initial filter
            delay: 25, // Transition delay in ms
            delayMode: 'progressive', // 'progressive' or 'alternate'
            easing: 'ease-out',
            filterOutCss: { // Filtering out animation
                opacity: 0,
                transform: 'scale(0.5)'
            },
            filterInCss: { // Filtering in animation
                opacity: 1,
                transform: 'scale(1)'
            },
            layout: 'sameWidth', // See layouts
            selector: '.filtr-container',
        }
        // You can override any of these options and then call...
        var filterizd = $('.filtr-container').filterizr(options);
        // If you have already instantiated your Filterizr then call...
        filterizd.filterizr('setOptions', options);
        filterizd.filterizr('sort', 'date', 'desc');

    });

    $(document).ready(function () {
        $("#masFilter li").click(function () {
            $("#masFilter li").removeClass("active");
            $(this).addClass("active");
        });
    });
</script>
}