@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@using umbraco.MacroEngines
@using Newtonsoft.Json
@using RJP.MultiUrlPicker.Models
@using umbraco.NodeFactory
@using ContentModels = Umbraco.Web.PublishedContentModels
@using umbraco.cms.businesslogic.web
@using Umbraco.Web.Extensions
@using System.Linq
@using System.Web.Script.Serialization;
@{
    Layout = "Master.cshtml";

    var title = Model.Content.GetPropertyValue<string>("title");
    var heroImage = Model.Content.GetPropertyValue<IPublishedContent>("heroImage");
    var content = Model.Content.GetPropertyValue<string>("content");
    var cTAButton1 = Model.Content.GetPropertyValue<IEnumerable<IPublishedContent>>("cTAButton1");
    var cTAButton2 = Model.Content.GetPropertyValue<IEnumerable<IPublishedContent>>("cTAButton2");
    var thankYouMessage = Model.Content.GetProperty("thankYouMessage").HasValue ? Model.Content.GetProperty("thankYouMessage").Value : "";
    var reOrderCheckAdminEmail = Model.Content.HasValue("adminEmail") ? Model.Content.GetPropertyValue<int>("adminEmail") : 0;
    var reOrderCheckConfirmationEmail = Model.Content.HasValue("confirmationEmail") ? Model.Content.GetPropertyValue<int>("confirmationEmail") : 0;


}
@section InnerTopStyle {

    <link href="~/css/lib/jquery-ui.css" rel="stylesheet" />
}
<div class="re-order">

    <section class="heroBanner">
        @if (heroImage != null)
        {
        <figure class="bannerImage" style="background-image: url(@heroImage.Url)"></figure>
        }

    </section>
    <section class="heroBlock">
        <div class="containerWrapper">
            <div class="bgWrap">
                @if (!string.IsNullOrEmpty(title))
                {
                <h2>@title</h2>
                }
                @if(!string.IsNullOrEmpty(content))
                {
                @Html.Raw(content)
                }

                <ul class="heroLinks">
                    @if (Model.Content.HasValue("cTAButton1"))
                   {
                       foreach (var CTA in cTAButton1)
                       {
                           var cTAtitle = CTA.GetPropertyValue<string>("title");
                           var iconImage = CTA.GetPropertyValue<IPublishedContent>("iconImage");
                           var link = CTA.GetPropertyValue<Link>("link");

                    <li class="find-us">
                        @if (link != null)
                            {
                                if (link.Target == "_blank")
                                {
                            <a href="@link.Url" target="_blank">
                                <span class="heroLinksImage">
                                    @if (iconImage != null)
                                            {
                                            <img src="@iconImage.Url" alt="@iconImage.Name">
                                            }
                                           
                                </span>
                                <span class="heroLinksText">
                                    @if (!string.IsNullOrEmpty(cTAtitle))
                                            {
                                            @Html.Raw(cTAtitle)
                                            }
                                </span>

                            </a>
                                }
                                else
                                {
                            <a href="@link.Url">
                                <span class="heroLinksImage">
                                    @if (iconImage != null)
                                            {
                                            <img src="@iconImage.Url" alt="@iconImage.Name">
                                            }
                                            
                                </span>
                                <span class="heroLinksText">
                                    @if (!string.IsNullOrEmpty(cTAtitle))
                                            {
                                            @Html.Raw(cTAtitle)
                                            }
                                </span>
                            </a>
                                }

                            }
                            else
                            {
                            <span class="heroLinksImage">
                                @if (iconImage != null)
                                    {
                                    <img src="@iconImage.Url" alt="@iconImage.Name">
                                    }
                                    
                            </span>
                            <span class="heroLinksText">
                                @if (!string.IsNullOrEmpty(cTAtitle))
                                    {
                                    @Html.Raw(cTAtitle)
                                    }
                            </span>
                            }

                    </li>
                       }

                   }
                    @if (Model.Content.HasValue("cTAButton2"))
                {
                    foreach (var CTA in cTAButton2)
                    {
                        var cTAtitle = CTA.GetPropertyValue<string>("title");
                        var iconImage = CTA.GetPropertyValue<IPublishedContent>("iconImage");
                        var link = CTA.GetPropertyValue<Link>("link");

                    <li class="call-us">
                        @if (link != null)
                            {
                                if (link.Target == "_blank")
                                {
                            <a href="@link.Url" target="_blank">
                                <span class="heroLinksImage">
                                    @if (iconImage != null)
                                            {
                                            <img src="@iconImage.Url" alt="@iconImage.Name">
                                            }
                                            
                                </span>
                                <span class="heroLinksText">
                                    @if (!string.IsNullOrEmpty(cTAtitle))
                                            {
                                            @Html.Raw(cTAtitle)
                                            }
                                </span>

                            </a>
                                }
                                else
                                {
                            <a href="@link.Url">
                                <span class="heroLinksImage">
                                    @if (iconImage != null)
                                            {
                                            <img src="@iconImage.Url" alt="@iconImage.Name">
                                            }
                                            
                                </span>
                                <span class="heroLinksText">
                                    @if (!string.IsNullOrEmpty(cTAtitle))
                                            {
                                                var replacetitle = cTAtitle.Replace("<p>", "").Replace("</p>", "");
                                            @Html.Raw(replacetitle)
                                            }
                                </span>
                            </a>
                                }

                            }
                            else
                            {
                            <span class="heroLinksImage">
                                @if (iconImage != null)
                                    {
                                    <img src="@iconImage.Url" alt="@iconImage.Name">
                                    }
                                    
                            </span>
                            <span class="heroLinksText">
                                @if (!string.IsNullOrEmpty(cTAtitle))
                                    {
                                        var replacetitle = cTAtitle.Replace("<p>", "").Replace("</p>", "");
                                    @Html.Raw(replacetitle)
                                    }
                            </span>
                            }

                    </li>
                    }

                }
                </ul>
            </div>
        </div>
    </section>
    <section class="greyPanel">
        <div class="containerWrapper">
            <div class="bgWrap">

                @if (String.IsNullOrEmpty(ViewBag.ReOrderCheckErrorMessage) == false)
                {
                    <div class="alert alert-warning">
                        <strong>Warning!</strong> @ViewBag.ReOrderCheckErrorMessage
                    </div>
                }
                <div class="contactFormWrap">
                    
                    @using (Html.BeginUmbracoForm("SubmitForm", "ReOrderCheck", FormMethod.Post, new { id = "contactForm", @class = "contactForm wpcf7-form" }))
                    {


                        if (String.IsNullOrEmpty(ViewBag.ReOrderCheckSuccessMessage) == false)
                        {
                            if (!string.IsNullOrEmpty(thankYouMessage.ToString()))
                            {
                                <div id="contactSucc" class="success-msg">
                                    <h4>@Html.Raw(thankYouMessage)</h4>
                                </div>
                            }
                            else
                            {
                                <div id="contactSucc" class="success-msg">
                                    <h4>@ViewBag.ReOrderCheckSuccessMessage</h4>
                                </div>
                            }

                        }
                        else
                        {



                            string secretKey = @System.Configuration.ConfigurationManager.AppSettings["recaptchaPrivateKey"];
                            string publicKey = @System.Configuration.ConfigurationManager.AppSettings["recaptchaPublicKey"];



                            <div class="row">
                                <div class="col-md-12 col-sm-12 col-lg-12 threecolsWrapper">
                                    <span class="wpcf7-form"></span>
                                    <div class="form-group col-lg-4 col-sm-6 col-xs-12 nopadding">
                                        <label for="firstName">First Name</label>
                                        <input type="text" class="form-control " maxlength="50" required name="firstName" id="firstName">
                                        <span class="errorSpan vd f-error">*</span>
                                    </div>
                                    <div class="form-group col-lg-4 col-sm-6 col-xs-12 nopadding">
                                        <label for="lastName">Last Name</label>
                                        <input type="text" class="form-control " maxlength="50" required name="lastName" id="lastName">
                                        <span class="errorSpan vd f-error">*</span>
                                    </div>
                                    <div class="form-group col-lg-4 col-sm-12 col-xs-12 nopadding fullwidth">
                                        <label for="accNo">Last 4 digits of checking account number</label>
                                        <input type="text" class="form-control " required name="accNo" id="accNo">
                                        <span class="errorSpan vd f-error">*</span>
                                    </div>
                                </div>
                                <div class="col-md-12 col-sm-12 col-lg-12 parentWrapper">
                                    <div class="form-group col-lg-6 col-xs-12 nopadding">
                                        <label for="cntTelePhone">Phone number</label>
                                        <input type="text" class="form-control" name="cntTelePhone" required id="cntTelePhone">
                                        <span class="errorSpan vd f-error">*</span>
                                    </div>
                                    <div class="form-group col-lg-6 col-xs-12 nopadding">
                                        <label for="cntEmail">Email</label>
                                        <input type="email" class="form-control" required="" name="cntEmail" id="cntEmail" aria-required="true" aria-invalid="true">
                                        <span class="errorSpan vd f-error">*</span>
                                    </div>
                                    <div class="form-group col-lg-6 col-xs-12 nopadding">
                                        <label for="addressOne">Address line 1</label>
                                        <input type="text" class="form-control " required name="addressOne" id="addressOne">
                                        <span class="errorSpan vd f-error">*</span>
                                    </div>
                                    <div class="form-group col-lg-6 col-xs-12 nopadding">
                                        <label for="addressTwo">Address line 2</label>
                                        <input type="text" class="form-control" name="addressTwo" id="addressTwo">

                                    </div>
                                    <div class="form-group col-lg-6 col-xs-12 nopadding">
                                        <label for="city">City</label>
                                        <input type="text" class="form-control" required name="city" id="city">
                                        <span class="errorSpan vd f-error">*</span>
                                    </div>
                                    <div class="form-group col-lg-6 col-xs-12 nopadding">
                                        <label for="state">State</label>
                                        <select name="state" id="state" required class="form-control selectBox">
                                            <option value="">-Select State-</option>
                                          
                                        </select>
                                        <span class="errorSpan vd f-error">*</span>
                                    </div>

                                    <div class="form-group col-lg-6 col-xs-12 nopadding">
                                        <label for="zip">Zip Code</label>
                                        <input type="text" class="form-control " required name="zip" id="zip">
                                        <span class="errorSpan vd f-error">*</span>
                                    </div>
                                    <div class="form-group col-lg-6 col-xs-12 nopadding">
                                        <label for="country">Country</label>
                                        <select name="country" id="country" required default="United States" class="form-control selectBox">
                                            <option value="" rel="">-Select Country-</option>
                                           
                                        </select>
                                        <span class="errorSpan vd f-error">*</span>
                                    </div>
                                </div>
                            </div>
                            
                            <span class="wpcf7-form"></span>
                            <div class="row mob-flex">
                                <button class="btnManasq"><span>SUBMIT</span></button>
                                <input type="hidden" id="AdminEmail" name="AdminEmail" value="@reOrderCheckAdminEmail" />
                                <input type="hidden" id="ConfirmationEmail" name="ConfirmationEmail" value="@reOrderCheckConfirmationEmail" />
                                
                            </div>
                            <div class="captchaBlock">
                                <div id="capt_contact" class="g-recaptcha" data-sitekey="@publicKey" data-callback="onSubmit" data-size="invisible"></div>
                                <p class="form1_error hide">The captcha is required and can't be empty.</p>

                            </div>

                                <!-- <div class="success-msg" id="contactSucc">
                      <h4>Thank you for contacting Manasquan Bank. Your message was sent successfully</h4>
                    </div> -->


                        }

                    }
                </div>
            </div>
        </div>
    </section>
</div>
@section InnerBottomScript {
    <script src="~/scripts/lib/jquery-ui.js"></script>
    <script src="~/scripts/lib/country-json.js"></script>
<script>
    $(document).ready(function() {
      $("#contactSucc").length > 0 && $("html, body").animate({
        scrollTop: $(".contactFormWrap").offset().top - 200
      }, "slow")

      if (jQuery("#zip").length > 0) {
        document.getElementById('zip').addEventListener('input', function(e) {
          var x = e.target.value.replace(/\D/g, '').match(/(\d{0,5})/);
          e.target.value = x[1];
        });
      }
      if (jQuery("#accNo").length > 0) {
        document.getElementById('accNo').addEventListener('input', function(e) {
          var x = e.target.value.replace(/\D/g, '').match(/(\d{0,4})/);
          e.target.value = x[1];
        });
      }

    });

    $(document).ready(function() {
      $.each(myJson.countries, function(index, value) {
        $("#country").append('<option rel="' + index + '" value="' + value.country + '">' + value.country + '</option>');
      });
      country_id = $("#country").attr("default");
      $("#country").find("option[value='" + country_id + "']").prop("selected", true).trigger("change");


      country_id = $("#country").find('option:selected').attr('rel');
      // console.log("Country INDEX : " + country_id);
      if (country_id != "") {
        $.each(myJson.countries[country_id].states, function(index1, value1) {
          $("#state").find("option:first").text("-Select State-");
          $("#state").append('<option rel="' + index1 + '" value="' + value1 + '">' + value1 + '</option>');
          // $("#state").selectmenu("refresh");
        });

        state_id = $("#state").attr("default");
        $("#state").find("option[value='" + state_id + "']").prop("selected", true).trigger("change");
      }
      $("#state,#country").selectmenu();
      $("#country").parent().find("span.vd").removeClass('f-important f-error').addClass('f-success');

      $("#country").on('selectmenuchange', function() {
        $("#state").selectmenu("destroy");
        country_id = $(this).find('option:selected').attr('rel');
        $("#state").find("option").not("option:nth-child(1)").remove();
        $("#state").find("option:first").text("-Select State-");
        $.each(myJson.countries[country_id].states, function(index1, value1) {

          $("#state").append('<option rel="' + index1 + '" value="' + value1 + '">' + value1 + '</option>');
          console.log('<option rel="' + index1 + '" value="' + value1 + '">' + value1 + '</option>');
        });
        $("#state").selectmenu();

      });

    });
</script>



}
